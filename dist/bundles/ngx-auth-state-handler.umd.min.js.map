{"version":3,"sources":["ng://ngx-auth-state-handler/auth-state-handler.ts","ng://ngx-auth-state-handler/ngx-auth-state-handler.module.ts"],"names":["NgxAuthStateHandler","this","USER_KEY","TOKEN_KEY","prototype","setPrefix","prefix","toUpperCase","replace","isLoggedIn","localStorage","undefined","setLoggedInUser","user","JSON","stringify","hasRole","role","getLoggedInUser","roles","indexOf","parse","setAccessToken","token","getAccessToken","logout","callback","Injectable","NgxAuthStateHandlerModule","NgModule","args","imports","CommonModule","providers"],"mappings":"sWAeI,SAAAA,IAHAC,KAAAC,SAAmB,GACnBD,KAAAE,UAAoB,GAsCxB,OAlCIH,EAAAI,UAAAC,UAAA,SAAUC,GACNL,KAAKC,SAAWI,EAAOC,cAAcC,QAAQ,KAAM,KAAO,aAC1DP,KAAKE,UAAYG,EAAOC,cAAcC,QAAQ,KAAM,KAAO,iBAG/DR,EAAAI,UAAAK,WAAA,WACI,MAAuC,aAAhCC,aAAaT,KAAKE,YAA6BO,aAAaT,KAAKE,YAAcQ,WAG1FX,EAAAI,UAAAQ,gBAAA,SAAgBC,GACZH,aAAaT,KAAKC,UAAYY,KAAKC,UAAUF,IAGjDb,EAAAI,UAAAY,QAAA,SAAQC,GACJ,OAAOhB,KAAKQ,eAA6E,EAA5DR,KAAKiB,kBAAkBC,MAAMC,QAAQH,EAAKV,gBAG3EP,EAAAI,UAAAc,gBAAA,WACI,GAAIjB,KAAKQ,aAAc,OAAOK,KAAKO,MAAMX,aAAaT,KAAKC,YAG/DF,EAAAI,UAAAkB,eAAA,SAAeC,GACXb,aAAaT,KAAKE,WAAaoB,GAGnCvB,EAAAI,UAAAoB,eAAA,WACI,OAAOd,aAAaT,KAAKE,YAG7BH,EAAAI,UAAAqB,OAAA,SAAOC,UACIhB,aAAaT,KAAKC,iBAClBQ,aAAaT,KAAKE,WACzBuB,yBAxCPC,EAAAA,mDA0CD3B,kBCzCA,SAAA4B,KAIyC,2BAJxCC,EAAAA,SAAQC,KAAA,CAAC,CACNC,QAAS,CAACC,EAAAA,cACVC,UAAW,CAACjC,OAEyB4B","sourcesContent":["/**\n * @license MIT\n * @version 1.1.0\n * @author Leonardo Quevedo\n * @description Authentication management service.\n */\n\nimport { Injectable } from '@angular/core'\n\n@Injectable()\nexport class NgxAuthStateHandler {\n\n    USER_KEY: string = ''\n    TOKEN_KEY: string = ''\n\n    constructor() { }\n\n    setPrefix(prefix: string) {\n        this.USER_KEY = prefix.toUpperCase().replace(/-/g, '_') + '_USER_DATA'\n        this.TOKEN_KEY = prefix.toUpperCase().replace(/-/g, '_') + '_ACCESS_TOKEN'\n    }\n\n    isLoggedIn() {\n        return localStorage[this.TOKEN_KEY] != 'undefined' && localStorage[this.TOKEN_KEY] != undefined\n    }\n\n    setLoggedInUser(user) {\n        localStorage[this.USER_KEY] = JSON.stringify(user)\n    }\n\n    hasRole(role: string) {\n        return this.isLoggedIn() && (this.getLoggedInUser().roles.indexOf(role.toUpperCase()) > -1)\n    }\n\n    getLoggedInUser() {\n        if (this.isLoggedIn()) return JSON.parse(localStorage[this.USER_KEY])\n    }\n\n    setAccessToken(token: string) {\n        localStorage[this.TOKEN_KEY] = token\n    }\n\n    getAccessToken() {\n        return localStorage[this.TOKEN_KEY]\n    }\n\n    logout(callback: Function) {\n        delete localStorage[this.USER_KEY]\n        delete localStorage[this.TOKEN_KEY]\n        callback()\n    }\n}","/**\n * @license MIT\n * @author Leonardo Quevedo\n * @description Directive module.\n */\n\nimport { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { NgxAuthStateHandler } from './auth-state-handler'\n\n@NgModule({\n    imports: [CommonModule],\n    providers: [NgxAuthStateHandler]\n})\nexport class NgxAuthStateHandlerModule { }"]}